'use strict';

var expect = require('chai').expect;
var exec = require('child_process').exec;
var path = require('path');
var fs = require('fs');
// var suppose = require('suppose');

describe('theorem run', function(){
    var dbPath = path.join(__dirname, '../test-db.json');
    var cmd = ['node', path.join(__dirname, '../bin/theorem'), '--dbpath', dbPath, 'run'];
    var confLocation = path.join(__dirname, '../.theorem');
    var oldConf;
    var tempConf = {
        supervisorConf: path.join(__dirname, 'supervisorConf.conf'),
        monitConf: path.join(__dirname, 'monitConf.conf'),
    };

    beforeEach(function(){
        fs.writeFileSync(dbPath, JSON.stringify({
            apps: [{'name':'Theorem','directory':'/home/dev','script':'app.js','command':'node','log':'/var/log'},{'name':'AppName','directory':__dirname,'script':'testMainScript.js','command':'node','log':'/var/log'}]
        }));
        fs.writeFileSync(tempConf.supervisorConf, '; First Line');
        fs.writeFileSync(tempConf.monitConf, '# First Line');
    });

    afterEach(function(){
        if(fs.existsSync(dbPath)){
            fs.unlinkSync(dbPath);
        }
        fs.unlinkSync(tempConf.supervisorConf);
        fs.unlinkSync(tempConf.monitConf);
    });

    describe('No Conf Run', function(){
        it('should raise an error because of missing config locations', function(done){
            this.timeout(8000);

            exec(cmd.join(' '), function (error, stdout, stderr) {
                expect(error).to.exist;
                expect(stderr).to.have.string('Config files not set. Please set the values of "monitConf" and "supervisorConf" using "theorem config"');
                done();
            });
        });
    });

    describe('Conf Run', function(){
        before(function(done){
            fs.readFile(confLocation,function(err, data){
                oldConf = data;
                fs.writeFileSync(confLocation, JSON.stringify(tempConf));
                done();
            });
        });

        after(function(){
            fs.writeFileSync(confLocation, oldConf);
        });

        it('should abort if there are no apps', function(done){
            this.timeout(8000);
            fs.unlinkSync(dbPath);

            exec(cmd.join(' '), function (error, stdout, stderr) {
                expect(error).to.exist;
                expect(stderr).to.have.string('There are currently no apps registered. Aborting...');
                done();
            });
        });

        it('should generate and inject new configurations', function(done){
            this.timeout(8000);

            exec(cmd.join(' '), function (error, stdout, stderr) {
                expect(error).to.not.exist;
                expect(fs.readFileSync(tempConf.supervisorConf).toString()).to.be.equal('; First Line\n\n; ### Automatically generated by Theorem ###\n\n; Theorem Config;\n[program:Theorem]\ncommand=node app.js;\ndirectory=/home/dev;\nprocess_name=Theorem;\nautorestart=true;\nstartsecs=1;\nstopwaitsecs=10;\nstdout_logfile=/var/log/Theorem.log;\nstderr_logfile=/var/log/Theorem.err.log;\n\n; AppName Config;\n[program:AppName]\ncommand=node testMainScript.js;\ndirectory=/vagrant/theorem/test;\nprocess_name=AppName;\nautorestart=true;\nstartsecs=1;\nstopwaitsecs=10;\nstdout_logfile=/var/log/AppName.log;\nstderr_logfile=/var/log/AppName.err.log;\n\n; ### End of Theorem Config ###');
                expect(fs.readFileSync(tempConf.monitConf).toString()).to.be.equal('# First Line\n\n### Automatically generated by Theorem ###\n\n# Theorem Config\nwith pidfile /usr/local/var/run/Theorem.pid\n  start program = "/usr/bin/supervisorctl start Theorem"\n  stop program = "/usr/bin/supervisorctl stop Theorem"\n  if 10 restarts within 10 cycles\n    then timeout\n\n# AppName Config\nwith pidfile /usr/local/var/run/AppName.pid\n  start program = "/usr/bin/supervisorctl start AppName"\n  stop program = "/usr/bin/supervisorctl stop AppName"\n  if 10 restarts within 10 cycles\n    then timeout\n\n### End of Theorem Config ###');
                done();
            });
        });

        it('should generate new config and replace old one', function(done){
            this.timeout(8000);

            fs.writeFileSync(tempConf.supervisorConf, '; First Line\n\n; ### Automatically generated by Theorem ###\n\nOLD CONFIG\n\n; ### End of Theorem Config ###\n\n; Last Line');
            fs.writeFileSync(tempConf.monitConf, '# First Line\n\n### Automatically generated by Theorem ###\n\nOLD CONFIG\n\n### End of Theorem Config ###\n\n# Last Line');

            exec(cmd.join(' '), function (error, stdout, stderr) {
                expect(error).to.not.exist;
                expect(fs.readFileSync(tempConf.supervisorConf).toString()).to.be.equal('; First Line\n\n; ### Automatically generated by Theorem ###\n\n; Theorem Config;\n[program:Theorem]\ncommand=node app.js ;\ndirectory=/home/dev ;\nprocess_name=Theorem ;\nautorestart=true ;\nstartsecs=1 ;\nstopwaitsecs=10 ;\nstdout_logfile=/var/log/Theorem.log ;\nstderr_logfile=/var/log/Theorem.err.log ;\n\n; AppName Config;\n[program:AppName]\ncommand=node testMainScript.js ;\ndirectory=/vagrant/theorem/test ;\nprocess_name=AppName ;\nautorestart=true ;\nstartsecs=1 ;\nstopwaitsecs=10 ;\nstdout_logfile=/var/log/AppName.log ;\nstderr_logfile=/var/log/AppName.err.log ;\n\n; ### End of Theorem Config ###\n\n; Last Line');
                expect(fs.readFileSync(tempConf.monitConf).toString()).to.be.equal('# First Line\n\n### Automatically generated by Theorem ###\n\n# Theorem Config\nwith pidfile /usr/local/var/run/Theorem.pid\n  start program = "/usr/bin/supervisorctl start Theorem"\n  stop program = "/usr/bin/supervisorctl stop Theorem"\n  if 10 restarts within 10 cycles\n    then timeout\n\n# AppName Config\nwith pidfile /usr/local/var/run/AppName.pid\n  start program = "/usr/bin/supervisorctl start AppName"\n  stop program = "/usr/bin/supervisorctl stop AppName"\n  if 10 restarts within 10 cycles\n    then timeout\n\n### End of Theorem Config ###\n\n# Last Line');
                done();
            });
        });
    });
});
